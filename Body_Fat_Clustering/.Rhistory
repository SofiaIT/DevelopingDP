data(bodyfat)
bodyfat <- edit(bodyfat)
?bodyfat
library(caret)
library(rpart)
library(randomForest)
# Guardo il valore min e max della variabile di risposta DEXfat (body fat measured by DXA, response variable)
min(bodyfat$DEXfat)
max(bodyfat$DEXfat)
# Categorizzo la variabile DEXfat in tre classi di peso corporeo: basso, medio e elevato per usarla poi nel
# mio algoritmo di machine learning basato su un albero.
bodyfat$DEXfat1[bodyfat$DEXfat <= 20] <- "low"
bodyfat$DEXfat1[bodyfat$DEXfat > 20 & bodyfat$DEXfat <=40] <- "medium"
bodyfat$DEXfat1[bodyfat$DEXfat > 40] <- "high"
# Elimino i nomi delle righe.
row.names(bodyfat)<- NULL
# Guardo quante osservazioni ho per classe.
table(bodyfat$DEXfat1)
# Tolgo la colonna corrispondente a DEXfat originale (variabile continua)
bodyfat <- bodyfat[,-2]
# Metto in ordine le osservazioni per DEXfat1
bodyfat <- bodyfat[with(bodyfat, order(DEXfat1)), ]
# Divido il data set in un training data set e in un test data set
inTrain <- createDataPartition(y=bodyfat$DEXfat1, p=0.6, list=FALSE)
training <- bodyfat
training <- bodyfat[inTrain,]
testing <- bodyfat[-inTrain,]
dim(training); dim(testing)
training <- edit(training)
# Creo un grafico per waist circumference (circonferenza vita) e hip circumference (circonferenza bacino).
qplot(hipcirc, waistcirc, colour=DEXfat1, size=I(4), data = training)
# Dico ad R di considerare DEXfat1 come variabile categorica.
training$DEXfat1 <- as.factor(training$DEXfat1)
# Implemento il modello basato su un algoritmo di predizione che usa gli alberi
set.seed(1234)
modFit <- train(DEXfat1 ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
prediction <- predict(modFit, newdata=testing)
testing$predRight <- prediction==testing$DEXfat1
table(prediction, testing$DEXfat1)
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
bodyfat <- edit(bodyfat)
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
bodyfat <- edit(bodyfat)
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
library(TH.data)
data(bodyfat)
bodyfat <- edit(bodyfat)
?bodyfat
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
# ASSIGNMENT #
# Carico la libreria dove si trova il data set bodyfat
library(TH.data)
data(bodyfat)
bodyfat <- edit(bodyfat)
?bodyfat
library(caret)
library(rpart)
library(randomForest)
# Guardo il valore min e max della variabile di risposta DEXfat (body fat measured by DXA, response variable)
min(bodyfat$DEXfat)
max(bodyfat$DEXfat)
# Categorizzo la variabile DEXfat in tre classi di peso corporeo: basso, medio e elevato per usarla poi nel
# mio algoritmo di machine learning basato su un albero.
bodyfat$DEXfat1[bodyfat$DEXfat <= 20] <- "low"
bodyfat$DEXfat1[bodyfat$DEXfat > 20 & bodyfat$DEXfat <=40] <- "medium"
bodyfat$DEXfat1[bodyfat$DEXfat > 40] <- "high"
# Elimino i nomi delle righe.
row.names(bodyfat)<- NULL
# Guardo quante osservazioni ho per classe.
table(bodyfat$DEXfat1)
# Tolgo la colonna corrispondente a DEXfat originale (variabile continua)
bodyfat <- bodyfat[,-2]
# Metto in ordine le osservazioni per DEXfat1
bodyfat <- bodyfat[with(bodyfat, order(DEXfat1)), ]
# Divido il data set in un training data set e in un test data set
inTrain <- createDataPartition(y=bodyfat$DEXfat1, p=0.6, list=FALSE)
training <- bodyfat
training <- bodyfat[inTrain,]
testing <- bodyfat[-inTrain,]
dim(training); dim(testing)
training <- edit(training)
# Creo un grafico per waist circumference (circonferenza vita) e hip circumference (circonferenza bacino).
qplot(hipcirc, waistcirc, colour=DEXfat1, size=I(4), data = training)
# Dico ad R di considerare DEXfat1 come variabile categorica.
training$DEXfat1 <- as.factor(training$DEXfat1)
# Implemento il modello basato su un algoritmo di predizione che usa gli alberi
set.seed(123)
modFit <- train(DEXfat1 ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
prediction <- predict(modFit, newdata=testing)
testing$predRight <- prediction==testing$DEXfat1
table(prediction, testing$DEXfat1)
# ASSIGNMENT #
# Carico la libreria dove si trova il data set bodyfat
library(TH.data)
data(bodyfat)
bodyfat <- edit(bodyfat)
?bodyfat
library(caret)
library(rpart)
library(randomForest)
# Guardo il valore min e max della variabile di risposta DEXfat (body fat measured by DXA, response variable)
min(bodyfat$DEXfat)
max(bodyfat$DEXfat)
# Categorizzo la variabile DEXfat in tre classi di peso corporeo: basso, medio e elevato per usarla poi nel
# mio algoritmo di machine learning basato su un albero.
bodyfat$DEXfat1[bodyfat$DEXfat <= 20] <- "low"
bodyfat$DEXfat1[bodyfat$DEXfat > 20 & bodyfat$DEXfat <=40] <- "medium"
bodyfat$DEXfat1[bodyfat$DEXfat > 40] <- "high"
# Elimino i nomi delle righe.
row.names(bodyfat)<- NULL
# Guardo quante osservazioni ho per classe.
table(bodyfat$DEXfat1)
# Tolgo la colonna corrispondente a DEXfat originale (variabile continua)
bodyfat <- bodyfat[,-2]
# Metto in ordine le osservazioni per DEXfat1
bodyfat <- bodyfat[with(bodyfat, order(DEXfat1)), ]
# Divido il data set in un training data set e in un test data set
inTrain <- createDataPartition(y=bodyfat$DEXfat1, p=0.6, list=FALSE)
training <- bodyfat
training <- bodyfat[inTrain,]
testing <- bodyfat[-inTrain,]
dim(training); dim(testing)
training <- edit(training)
# Creo un grafico per waist circumference (circonferenza vita) e hip circumference (circonferenza bacino).
qplot(hipcirc, waistcirc, colour=DEXfat1, size=I(4), data = training)
# Dico ad R di considerare DEXfat1 come variabile categorica.
training$DEXfat1 <- as.factor(training$DEXfat1)
# Implemento il modello basato su un algoritmo di predizione che usa gli alberi
set.seed(123)
modFit <- train(DEXfat1 ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
prediction <- predict(modFit, newdata=testing)
testing$predRight <- prediction==testing$DEXfat1
table(prediction, testing$DEXfat1)
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
#----------------------------#
#  DEVELOPING DATA PRODUCTS  #
#----------------------------#
# ASSIGNMENT #
# Carico la libreria dove si trova il data set bodyfat
library(TH.data)
data(bodyfat)
bodyfat <- edit(bodyfat)
?bodyfat
library(caret)
library(rpart)
library(randomForest)
# Guardo il valore min e max della variabile di risposta DEXfat (body fat measured by DXA, response variable)
min(bodyfat$DEXfat)
max(bodyfat$DEXfat)
# Categorizzo la variabile DEXfat in tre classi di peso corporeo: basso, medio e elevato per usarla poi nel
# mio algoritmo di machine learning basato su un albero.
bodyfat$DEXfat1[bodyfat$DEXfat <= 20] <- "low"
bodyfat$DEXfat1[bodyfat$DEXfat > 20 & bodyfat$DEXfat <=40] <- "medium"
bodyfat$DEXfat1[bodyfat$DEXfat > 40] <- "high"
# Elimino i nomi delle righe.
row.names(bodyfat)<- NULL
# Guardo quante osservazioni ho per classe.
table(bodyfat$DEXfat1)
# Tolgo la colonna corrispondente a DEXfat originale (variabile continua)
bodyfat <- bodyfat[,-2]
# Metto in ordine le osservazioni per DEXfat1
bodyfat <- bodyfat[with(bodyfat, order(DEXfat1)), ]
# Divido il data set in un training data set e in un test data set
inTrain <- createDataPartition(y=bodyfat$DEXfat1, p=0.6, list=FALSE)
training <- bodyfat
training <- bodyfat[inTrain,]
testing <- bodyfat[-inTrain,]
dim(training); dim(testing)
training <- edit(training)
# Creo un grafico per waist circumference (circonferenza vita) e hip circumference (circonferenza bacino).
qplot(hipcirc, waistcirc, colour=DEXfat1, size=I(4), data = training)
# Dico ad R di considerare DEXfat1 come variabile categorica.
training$DEXfat1 <- as.factor(training$DEXfat1)
# Implemento il modello basato su un algoritmo di predizione che usa gli alberi
set.seed(123)
modFit <- train(DEXfat1 ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
prediction <- predict(modFit, newdata=testing)
testing$predRight <- prediction==testing$DEXfat1
table(prediction, testing$DEXfat1)
output <- predict(modFit, testing)
output
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/project')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
library(TH.data)
data(bodyfat)
bodyfat <- edit(bodyfat)
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
?plot
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
library(TH.data)
data(bodyfat)
bodyfat <- edit(bodyfat)
?bodyfat
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP2')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
shinyapps::setAccountInfo(name='sofiait', token='F9E9CE59B944CF53069226F987619AEA', secret='ea7pf6ltwFxXRFZxH0rNesOuKYewtnoTmbK6+5sk')
deployApp()
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
library("devtools", lib.loc="~/R/win-library/3.1")
library("reshape", lib.loc="~/R/win-library/3.1")
library("reshape2", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
library("shinyapps", lib.loc="~/R/win-library/3.1")
remove.packages("shinyapps", lib="~/R/win-library/3.1")
install.packages("shunyapps")
install.packages("shinyapps")
install.packages("shinyapps")
install.packages("shinyapps")
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
library("devtools", lib.loc="~/R/win-library/3.1")
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='sofiait',
token='BBD525B02B7E72C236BE0FC7AA41676E',
secret='<SECRET>')
devtools::install_github('rstudio/shinyapps')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
library("devtools", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
setwd("~/Desktop/Slides/project/")
setwd("C:/Users/Sofia Cividini/Desktop/Slides")
author("Body_Fat_Clustering")
?head
?bodyfat
library(TH.data)
?bodyfat
shiny::runApp('C:/Users/Sofia Cividini/Desktop/DDP')
and waist circumference")
```{r, echo=FALSE, fig.height=7, fig.width=7}
plot(DEXfat ~ waistcirc, data=bodyfat, main="Relationship between Body Fat and Waist Circumference", xlab="Waist Circumference", ylab="Body Fat Measured by DXA", pch=16, col="blue"")
**Source:** Garcia et al. (2005), Improved prediction of body fat by measuring skinfold thickness, circumferences, and bone breadths. Obesity Research, 13(3), 626–634.
.
